[user]
	name = Logan Graba
	email = lgraba@gmail.com

[url "ssh://git@github.com/"]
	insteadOf = https://github.com/

[color]
	ui = true
	status = auto
	branch = auto

[color "status"]
	added = green
	changed = red
	untracked = yellow

[core]
	pager = delta
	editor = vim
	autocrlf = input
	excludesfile = ~/.gitignore_global

[push]
	default = simple

[alias]
	graph = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%aN>%Creset'

  # branches ordered by last commit first (https://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit)
	last-branches = for-each-ref --sort=-committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'

	# shows list of files that have a merge conflict
	conflicts = diff --name-only --diff-filter=U
	changes = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit

	# unstages a file. use like 'git unstage filename'
	unstage = reset HEAD --

	# resets all uncomitted changes and files
	abort = reset --hard HEAD

	# shows diff only for files staged to commit
	new = diff --cached

	# shows only changes to files in current directory
	here = status .

	# undo last commit
	undo = reset HEAD~1

	# change last commit message
	recommit = commit --amend

	# log on one line
	log-one = log --pretty=oneline --abbrev-commit
	lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
	untrackeds = ls-files --others --exclude-standard

	# remove merged branches
  rm-local-merged = "!git branch --merged | egrep -v '(master|develop|main)$' | xargs -t -I % git branch -d %"
	rm-merged = "!main_branch=$(git remote show origin | sed -n '/HEAD branch/s/.*: //p') && git branch --merged | egrep -v '(master|develop|main)$' | xargs -t -I % git branch -d % && git checkout -q $main_branch && git for-each-ref refs/heads/ \"--format=%(refname:short)\" | while read branch; do mergeBase=$(git merge-base $main_branch $branch) && [[ $(git cherry $main_branch $(git commit-tree $(git rev-parse \"$branch^{tree}\") -p $mergeBase -m _)) == \"-\"* ]] && git branch -D $branch; done"

	pr = "!f() { open "https://github.com/$(git remote -v|head -n 1|cut -d: -f2|gsed -r 's/(.*).git.*/\\1/')/pull/new/$(git rev-parse --abbrev-ref HEAD)"; };f"

	ls-creation = "!f() { cd -- ${GIT_PREFIX:-.}; git ls-tree -r --name-only HEAD | while read filename; do echo "$(git log --reverse --date=iso --format=\"%ad | %h | %an |\" -- $filename | head -1) $filename"; done | sort; };f"

	ls-modification = "!f() { cd -- ${GIT_PREFIX:-.}; git ls-tree -r --name-only HEAD | while read filename; do echo "$(git log -1 --date=iso --format=\"%ad | %h | %an |\" -- $filename) $filename"; done | sort; };f"

	message = show -s --format=%B

[pull]
	rebase = merges

[rerere]
	enabled = 1

[credential]
	helper = store

#[pager]
#	diff = diff-so-fancy | less --tabs=1,5 -RFX
#	show = diff-so-fancy | less --tabs=1,5 -RFX

[rebase]
	autoStash = true
	autosquash = true

[fetch]
	prune = true

[init]
	defaultBranch = main

[interactive]
    diffFilter = delta --color-only

[delta]
	side-by-side = true
    navigate = true    # use n and N to move between diff sections
    light = false      # set to true if you're in a terminal w/ a light background color (e.g. the default macOS terminal)

[merge]
	conflictstyle = zdiff3

[diff]
    colorMoved = default
	algorithm = histogram
	context = 10
[commit]
	verbose = true
[branch]
	sort = -committerdate
[tag]
	sort = taggerdate
